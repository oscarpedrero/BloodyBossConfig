import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { realBossEncounterSchema, RealBossEncounterForm } from '../schemas/realBoss.schema'
import { BossEncounter } from '../types'
import { Button } from './ui/button'
import { Input } from './ui/input'
import { Label } from './ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card'
import { Alert, AlertDescription } from './ui/alert'
import { PrefabSelector } from './PrefabSelector'
import { Save, AlertCircle } from 'lucide-react'

interface BossFormProps {
  boss?: BossEncounter
  onSubmit: (data: BossEncounter) => void
  onCancel: () => void
}

export function BossForm({ boss, onSubmit, onCancel }: BossFormProps) {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    watch,
    setValue
  } = useForm<RealBossEncounterForm>({
    resolver: zodResolver(realBossEncounterSchema),
    defaultValues: boss || {
      name: '',
      nameHash: '',
      AssetName: '',
      Hour: '12:00',
      HourDespawn: '12:30:00',
      PrefabGUID: 0,
      level: 50,
      multiplier: 1.0,
      items: [],
      bossSpawn: false,
      Lifetime: 1800,
      x: 0,
      y: 0,
      z: 0,
      unitStats: {
        PhysicalPower: 50,
        SpellPower: 50,
        ResourcePower: 25,
        SiegePower: 10,
        PhysicalResistance: 0,
        SpellResistance: 0,
        FireResistance: 0,
        PassiveHealthRegen: 1,
        CCReduction: 0,
        HealthRecovery: 1,
        DamageReduction: 0,
        HealingReceived: 0
      },
      ConsecutiveSpawns: 0,
      CurrentDifficultyMultiplier: 1,
      IsPaused: false,
      LastAnnouncedPhase: 1,
      Mechanics: [],
      AbilitySwaps: {}
    }
  })

  const onFormSubmit = (data: RealBossEncounterForm) => {
    onSubmit(data as BossEncounter)
  }

  return (
    <form onSubmit={handleSubmit(onFormSubmit)} className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Basic Information</CardTitle>
          <CardDescription>
            Configure the basic properties of this boss
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="name">Boss Name *</Label>
              <Input
                id="name"
                {...register('name')}
                placeholder="Ancient Vampire Lord"
              />
              {errors.name && (
                <p className="text-sm text-destructive">{errors.name.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <PrefabSelector
                value={watch('PrefabGUID')}
                onSelect={(prefabGuid, name, assetName) => {
                  setValue('PrefabGUID', prefabGuid)
                  setValue('AssetName', assetName)
                  // Auto-generar nameHash
                  setValue('nameHash', Math.abs(name.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0)).toString())
                }}
                label="VBlood Prefab *"
              />
              {errors.PrefabGUID && (
                <p className="text-sm text-destructive">{errors.PrefabGUID.message}</p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="level">Level</Label>
              <Input
                id="level"
                type="number"
                {...register('level', { valueAsNumber: true })}
                min={1}
                max={100}
              />
              {errors.level && (
                <p className="text-sm text-destructive">{errors.level.message}</p>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="multiplier">Health Multiplier</Label>
              <Input
                id="multiplier"
                type="number"
                step="0.1"
                {...register('multiplier', { valueAsNumber: true })}
                min={0.1}
                max={10}
              />
              {errors.multiplier && (
                <p className="text-sm text-destructive">{errors.multiplier.message}</p>
              )}
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="spawnType">Spawn Type</Label>
            <select
              id="spawnType"
              {...register('spawnType')}
              className="w-full h-10 px-3 py-2 text-sm bg-background border rounded-md"
            >
              <option value="world">World Spawn</option>
              <option value="manual">Manual Spawn</option>
              <option value="scheduled">Scheduled</option>
            </select>
          </div>

          {spawnType === 'world' && (
            <div className="space-y-2">
              <Label htmlFor="lifeTime">Life Time (seconds)</Label>
              <Input
                id="lifeTime"
                type="number"
                {...register('lifeTime', { valueAsNumber: true })}
                placeholder="3600"
              />
              <p className="text-sm text-muted-foreground">
                Leave empty for infinite lifetime
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Location</CardTitle>
          <CardDescription>
            Set the spawn location for this boss
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="location.x">X Coordinate</Label>
              <Input
                id="location.x"
                type="number"
                step="0.01"
                {...register('location.x', { valueAsNumber: true })}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="location.y">Y Coordinate</Label>
              <Input
                id="location.y"
                type="number"
                step="0.01"
                {...register('location.y', { valueAsNumber: true })}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="location.z">Z Coordinate</Label>
              <Input
                id="location.z"
                type="number"
                step="0.01"
                {...register('location.z', { valueAsNumber: true })}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Immunities</CardTitle>
          <CardDescription>
            Configure boss immunities
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="immuneToSun"
              {...register('immuneToSun')}
              className="h-4 w-4 rounded border-gray-300"
            />
            <Label htmlFor="immuneToSun" className="font-normal">
              Immune to sun damage
            </Label>
          </div>

          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="immuneToHolyArea"
              {...register('immuneToHolyArea')}
              className="h-4 w-4 rounded border-gray-300"
            />
            <Label htmlFor="immuneToHolyArea" className="font-normal">
              Immune to holy areas
            </Label>
          </div>
        </CardContent>
      </Card>

      {Object.keys(errors).length > 0 && (
        <Alert variant="destructive">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>
            Please fix the errors above before submitting
          </AlertDescription>
        </Alert>
      )}

      <div className="flex gap-4">
        <Button type="submit" disabled={isSubmitting}>
          <Save className="mr-2 h-4 w-4" />
          {boss ? 'Update Boss' : 'Create Boss'}
        </Button>
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
      </div>
    </form>
  )
}