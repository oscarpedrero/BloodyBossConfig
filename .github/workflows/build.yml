name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
            arch: 'aarch64'
            name: 'macos-arm64'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
            arch: 'x64'
            name: 'macos-x64'
          - platform: 'ubuntu-20.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
            arch: 'x64'
            name: 'linux-x64'
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'
            arch: 'x64'
            name: 'windows-x64'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            # Windows artifacts
            if [ -f "src-tauri/target/release/bloodyboss-config.exe" ]; then
              cp "src-tauri/target/release/bloodyboss-config.exe" artifacts/
            fi
            if [ -f "src-tauri/target/release/bundle/nsis/"*.exe ]; then
              cp src-tauri/target/release/bundle/nsis/*.exe artifacts/ || true
            fi
            if [ -f "src-tauri/target/release/bundle/msi/"*.msi ]; then
              cp src-tauri/target/release/bundle/msi/*.msi artifacts/ || true
            fi
          elif [[ "${{ matrix.platform }}" == "ubuntu-20.04" ]]; then
            # Linux artifacts
            if [ -f "src-tauri/target/release/bloodyboss-config" ]; then
              cp "src-tauri/target/release/bloodyboss-config" artifacts/bloodyboss-config-linux
            fi
            if [ -f "src-tauri/target/release/bundle/deb/"*.deb ]; then
              cp src-tauri/target/release/bundle/deb/*.deb artifacts/ || true
            fi
            if [ -f "src-tauri/target/release/bundle/appimage/"*.AppImage ]; then
              cp src-tauri/target/release/bundle/appimage/*.AppImage artifacts/ || true
            fi
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            # macOS artifacts
            if [ -f "src-tauri/target/${{ matrix.target }}/release/bloodyboss-config" ]; then
              cp "src-tauri/target/${{ matrix.target }}/release/bloodyboss-config" artifacts/bloodyboss-config-${{ matrix.name }}
            fi
            if [ -d "src-tauri/target/${{ matrix.target }}/release/bundle/macos/"*.app ]; then
              cp -r src-tauri/target/${{ matrix.target }}/release/bundle/macos/*.app artifacts/ || true
            fi
            if [ -f "src-tauri/target/${{ matrix.target }}/release/bundle/dmg/"*.dmg ]; then
              cp src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg artifacts/ || true
            fi
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bloodyboss-config-${{ matrix.name }}
          path: artifacts/*
          retention-days: 30

  create-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Create compressed packages
          for dir in release-artifacts/*/; do
            platform=$(basename "$dir")
            echo "Processing $platform"
            
            if [[ "$platform" == *"windows"* ]]; then
              # Windows: Create ZIP
              cd "$dir"
              if ls *.exe 1> /dev/null 2>&1; then
                zip -r "../../release-assets/BloodyBossConfig-Windows-x64-${GITHUB_REF_NAME}.zip" *.exe *.msi *.dll || true
              fi
              cd - > /dev/null
            elif [[ "$platform" == *"linux"* ]]; then
              # Linux: Create TAR.GZ
              cd "$dir"
              if ls bloodyboss-config-linux 1> /dev/null 2>&1; then
                tar -czf "../../release-assets/BloodyBossConfig-Linux-x64-${GITHUB_REF_NAME}.tar.gz" bloodyboss-config-linux *.deb *.AppImage || true
              fi
              cd - > /dev/null
            elif [[ "$platform" == *"macos"* ]]; then
              # macOS: Create TAR.GZ for each architecture
              cd "$dir"
              if ls bloodyboss-config-macos-* 1> /dev/null 2>&1; then
                for file in bloodyboss-config-macos-*; do
                  arch=$(echo "$file" | sed 's/bloodyboss-config-macos-//')
                  tar -czf "../../release-assets/BloodyBossConfig-macOS-${arch}-${GITHUB_REF_NAME}.tar.gz" "$file" *.dmg *.app || true
                done
              fi
              cd - > /dev/null
            fi
          done

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ github.ref_name }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ github.ref_name }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release ${{ github.ref_name }} does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: BloodyBoss Config ${{ github.ref_name }}
          body: |
            ## BloodyBoss Configuration Tool ${{ github.ref_name }}
            
            ### Downloads
            - **Windows x64**: BloodyBossConfig-Windows-x64-${{ github.ref_name }}.zip
            - **Linux x64**: BloodyBossConfig-Linux-x64-${{ github.ref_name }}.tar.gz  
            - **macOS ARM64**: BloodyBossConfig-macOS-aarch64-${{ github.ref_name }}.tar.gz
            - **macOS x64**: BloodyBossConfig-macOS-x64-${{ github.ref_name }}.tar.gz
            
            ### Installation
            1. Download the appropriate package for your platform
            2. Extract the archive
            3. Run the executable
            
            ### Windows Requirements
            - WebView2 Runtime (usually pre-installed on Windows 10/11)
            
            ### Changes
            See commit history for detailed changes.
            
            ---
            ü§ñ Generated with GitHub Actions
          files: |
            release-assets/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing release
        if: steps.check_release.outputs.exists == 'true'
        run: |
          echo "‚ö†Ô∏è  Release ${{ github.ref_name }} already exists!"
          echo "   To update it, delete the existing release first or use a new version tag."
          echo "   Current artifacts will be uploaded as build artifacts instead."
          
      - name: Upload to existing release (if forced)
        if: steps.check_release.outputs.exists == 'true' && github.event.inputs.force_update == 'true'
        run: |
          # Delete existing release assets and re-upload
          gh release delete-asset ${{ github.ref_name }} --yes || true
          gh release upload ${{ github.ref_name }} release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}